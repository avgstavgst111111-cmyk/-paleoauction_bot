"""
ü™ô Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç —Å –ø–æ–∏—Å–∫–æ–º –Ω–∞ –í–∏–æ–ª–∏—Ç–∏
"""

import os
import sys
from io import BytesIO
import base64
import re
from statistics import mean, median

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
try:
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    print("‚úÖ python-telegram-bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ python-telegram-bot...")
    os.system("pip install python-telegram-bot --quiet")
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

try:
    import requests
    from bs4 import BeautifulSoup
    print("‚úÖ requests –∏ beautifulsoup4 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ requests –∏ beautifulsoup4...")
    os.system("pip install requests beautifulsoup4 --quiet")
    import requests
    from bs4 import BeautifulSoup

try:
    from openai import OpenAI
    print("‚úÖ openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ openai...")
    os.system("pip install openai --quiet")
    from openai import OpenAI

print("\n" + "="*50)
print("ü™ô TELEGRAM –ë–û–¢ –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ú–û–ù–ï–¢")
print("="*50 + "\n")

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================
# –ë–µ—Ä—ë–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ) –∏–ª–∏ –∏–∑ –∫–æ–¥–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8209002461:AAGK-9tWbvOUhkC3mcZ0wk0DLTDKVIH_jWU")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "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")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN")
    sys.exit(1)

if not OPENAI_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω OPENAI_API_KEY")
    sys.exit(1)

print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)


# ============================================
# –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ù–ê –í–ò–û–õ–ò–¢–ò
# ============================================

def search_violity(coin_description):
    """–ò—â–µ—Ç –º–æ–Ω–µ—Ç—ã –Ω–∞ –í–∏–æ–ª–∏—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = coin_description.replace(" ", "+")
        url = f"https://violity.com/search?search_text={search_query}&category_id=5"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code != 200:
            return None
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ò—â–µ–º –ª–æ—Ç—ã –∏ —Ü–µ–Ω—ã
        prices = []
        lots = []
        
        # –ü–æ–∏—Å–∫ —Ü–µ–Ω (–í–∏–æ–ª–∏—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ü–µ–Ω)
        price_elements = soup.find_all(['span', 'div'], class_=re.compile('price|cost|value', re.I))
        
        for elem in price_elements:
            text = elem.get_text()
            # –ò—â–µ–º —á–∏—Å–ª–∞ —Å –≥—Ä–Ω –∏–ª–∏ UAH
            numbers = re.findall(r'(\d+[\s,]?\d*)\s*(?:–≥—Ä–Ω|UAH|‚Ç¥)', text)
            for num in numbers:
                try:
                    price = float(num.replace(',', '.').replace(' ', ''))
                    if 1 <= price <= 1000000:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–Ω—ã
                        prices.append(price)
                except:
                    continue
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–∞—Ö
        lot_elements = soup.find_all(['div', 'a'], class_=re.compile('lot|item|product', re.I))
        for lot in lot_elements[:10]:  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 10 –ª–æ—Ç–æ–≤
            title = lot.get_text().strip()
            if title and len(title) > 10:
                lots.append(title[:100])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        if not prices:
            return {
                'found': False,
                'message': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –í–∏–æ–ª–∏—Ç–∏'
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_price = mean(prices)
        med_price = median(prices)
        min_price = min(prices)
        max_price = max(prices)
        
        return {
            'found': True,
            'count': len(prices),
            'average': avg_price,
            'median': med_price,
            'min': min_price,
            'max': max_price,
            'lots': lots[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤
            'url': url
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –í–∏–æ–ª–∏—Ç–∏: {e}")
        return {
            'found': False,
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}'
        }


def format_violity_results(results, coin_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –í–∏–æ–ª–∏—Ç–∏"""
    if not results or not results.get('found'):
        return f"""

üîç **–ü–û–ò–°–ö –ù–ê –í–ò–û–õ–ò–¢–ò:**
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è "{coin_name}"

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–∞ [Violity.com](https://violity.com)"""
    
    text = f"""

üí∞ **–¶–ï–ù–´ –ù–ê –í–ò–û–õ–ò–¢–ò** (–Ω–∞–π–¥–µ–Ω–æ {results['count']} –ª–æ—Ç–æ–≤):

üìä **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:** {results['average']:.2f} –≥—Ä–Ω
üìà **–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞:** {results['median']:.2f} –≥—Ä–Ω
üîΩ **–ú–∏–Ω–∏–º—É–º:** {results['min']:.2f} –≥—Ä–Ω
üîº **–ú–∞–∫—Å–∏–º—É–º:** {results['max']:.2f} –≥—Ä–Ω

üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ª–æ—Ç—ã –Ω–∞ –í–∏–æ–ª–∏—Ç–∏]({results['url']})
"""
    
    if results.get('lots'):
        text += "\nüì¶ **–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:**\n"
        for i, lot in enumerate(results['lots'], 1):
            text += f"{i}. {lot}\n"
    
    return text


# ============================================
# –§–£–ù–ö–¶–ò–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø
# ============================================

async def recognize_coin_with_openai(image_bytes):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –º–æ–Ω–µ—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è GPT-4 Vision"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

1. **–°—Ç—Ä–∞–Ω–∞:** –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
2. **–ù–æ–º–∏–Ω–∞–ª:** –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ (1 —Ä—É–±–ª—å, 50 –∫–æ–ø–µ–µ–∫, 1 –¥–æ–ª–ª–∞—Ä –∏ —Ç.–¥.)
3. **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:** –ï—Å–ª–∏ –≤–∏–¥–µ–Ω
4. **–ú–∞—Ç–µ—Ä–∏–∞–ª:** –ò–∑ —á–µ–≥–æ —Å–¥–µ–ª–∞–Ω–∞
5. **–û–ø–∏—Å–∞–Ω–∏–µ:** –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –º–æ–Ω–µ—Ç–µ
6. **–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:** –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ

–í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 —Ä—É–±–ª—å 1997 –°–ü–ú–î" –∏–ª–∏ "50 –∫–æ–ø–µ–µ–∫ –°–°–°–† 1961")

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ."""
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=1000
        )
        
        return response.choices[0].message.content
    
    except Exception as e:
        error_msg = str(e)
        if "insufficient_quota" in error_msg or "quota" in error_msg.lower():
            return """‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI API

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫—Ä–µ–¥–∏—Ç OpenAI.

–û–ø–∏—à–∏—Ç–µ –º–æ–Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –Ω–∞–π–¥—É –µ—ë –Ω–∞ –í–∏–æ–ª–∏—Ç–∏!"""
        else:
            return f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"


def extract_coin_name(ai_response):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    lines = ai_response.split('\n')
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    for line in reversed(lines):
        if any(word in line.lower() for word in ['–ø–æ–∏—Å–∫', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–¥–ª—è –ø–æ–∏—Å–∫–∞', '–º–æ–Ω–µ—Ç–∞']):
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ
            clean = re.sub(r'–¥–ª—è –ø–æ–∏—Å–∫–∞:|–Ω–∞–∑–≤–∞–Ω–∏–µ:|–º–æ–Ω–µ—Ç–∞:', '', line, flags=re.I).strip()
            if len(clean) > 3:
                return clean
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ–¥ –∏ –Ω–æ–º–∏–Ω–∞–ª
    year_match = re.search(r'\b(19|20)\d{2}\b', ai_response)
    nominal_match = re.search(r'\d+\s*(—Ä—É–±–ª|–∫–æ–ø–µ|–≥—Ä–∏–≤–Ω|–¥–æ–ª–∞—Ä|–µ–≤—Ä–æ|cent)', ai_response, re.I)
    
    if year_match and nominal_match:
        return f"{nominal_match.group(0)} {year_match.group(0)}"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
    words = [w for w in ai_response.split() if len(w) > 3]
    return ' '.join(words[:5]) if words else "–º–æ–Ω–µ—Ç–∞"


# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    welcome_text = """ü™ô **–ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–Ω–µ—Ç!**

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –º–æ–Ω–µ—Ç—ã –ø–æ —Ñ–æ—Ç–æ (AI GPT-4)
‚Ä¢ üí∞ –ò—â—É —Ü–µ–Ω—ã –Ω–∞ **–í–∏–æ–ª–∏—Ç–∏**
‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
‚Ä¢ üìà –î–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–æ—Ç–∞–º

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –º–æ–Ω–µ—Ç—ã**!

üí° **–°–æ–≤–µ—Ç—ã:**
‚úì –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚úì –ú–æ–Ω–µ—Ç–∞ –≤ —Ñ–æ–∫—É—Å–µ
‚úì –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ñ–æ–Ω
‚úì –ú–æ–∂–Ω–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏

–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –º–æ–Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 —Ä—É–±–ª—å 1997")

–ì–æ—Ç–æ–≤—ã? –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ! üì∏"""
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = """‚ÑπÔ∏è **–°–ü–†–ê–í–ö–ê**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å
/help - –°–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. üì∏ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ –º–æ–Ω–µ—Ç—ã
2. ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
3. üîç –ë–æ—Ç –∏—â–µ—Ç –Ω–∞ –í–∏–æ–ª–∏—Ç–∏
4. üí∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É

**–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:**
"1 —Ä—É–±–ª—å 1997 –°–ü–ú–î"
"50 –∫–æ–ø–µ–µ–∫ –°–°–°–† 1961"

**–ß—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è:**
‚úì –°—Ç—Ä–∞–Ω–∞, –≥–æ–¥, –Ω–æ–º–∏–Ω–∞–ª
‚úì –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
‚úì –¶–µ–Ω—ã –Ω–∞ –í–∏–æ–ª–∏—Ç–∏
‚úì –°—Ä–µ–¥–Ω—è—è/–º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω–∞
‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ! ü™ô"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    processing_msg = await update.message.reply_text(
        "üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–Ω–µ—Ç—É...**\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        await processing_msg.edit_text("ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        analysis = await recognize_coin_with_openai(bytes(photo_bytes))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        coin_name = extract_coin_name(analysis)
        
        # –ò—â–µ–º –Ω–∞ –í–∏–æ–ª–∏—Ç–∏
        await processing_msg.edit_text(f"üí∞ –ò—â—É —Ü–µ–Ω—ã –Ω–∞ –í–∏–æ–ª–∏—Ç–∏ –¥–ª—è: {coin_name}...")
        violity_results = search_violity(coin_name)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        violity_text = format_violity_results(violity_results, coin_name)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response = f"""ü™ô **–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê**

{analysis}
{violity_text}

---

üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚Ä¢ [Meshok.net](https://meshok.net) - –Ω—É–º–∏–∑–º–∞—Ç–∏–∫–∞
‚Ä¢ [Auction.ru](https://auction.ru) - –∞—É–∫—Ü–∏–æ–Ω—ã

üîÑ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ!"""
        
        await processing_msg.delete()
        await update.message.reply_text(response, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        await processing_msg.delete()
        await update.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –º–æ–Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–æ–º",
            parse_mode='Markdown'
        )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    user_text = update.message.text
    
    processing_msg = await update.message.reply_text(
        f"üîç –ò—â—É '{user_text}' –Ω–∞ –í–∏–æ–ª–∏—Ç–∏..."
    )
    
    try:
        # –ò—â–µ–º –Ω–∞ –í–∏–æ–ª–∏—Ç–∏
        violity_results = search_violity(user_text)
        violity_text = format_violity_results(violity_results, user_text)
        
        response = f"""ü™ô **–ü–æ–∏—Å–∫: "{user_text}"**
{violity_text}

üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞!

**–î—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã:**
‚Ä¢ [Meshok.net](https://meshok.net/numizmatika)
‚Ä¢ [Auction.ru](https://auction.ru)"""
        
        await processing_msg.delete()
        await update.message.reply_text(response, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        await processing_msg.delete()
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}",
            parse_mode='Markdown'
        )


# ============================================
# –ó–ê–ü–£–°–ö
# ============================================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        print("\n" + "="*50)
        print("‚úÖ –ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
        print("="*50)
        print(f"\nüì± @paleoauction_bot")
        print("ü§ñ AI: OpenAI GPT-4 Vision")
        print("üí∞ –ü–æ–∏—Å–∫: Violity.com")
        print("‚èπÔ∏è  Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
python-telegram-bot==20.7
openai==1.3.0
requests==2.31.0
beautifulsoup4==4.12.2
Pillow==10.1.0
